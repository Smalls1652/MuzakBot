// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuzakBot.Database;

#nullable disable

namespace MuzakBot.Database.Migrations
{
    [DbContext(typeof(LyricsAnalyzerDbContext))]
    [Migration("20240422213807_LyricsAnalyzerPromptStyle_Missing_Property")]
    partial class LyricsAnalyzerPromptStyle_Missing_Property
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.DatabaseUpdate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasAnnotation("Cosmos:PropertyName", "id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<bool>("MigratedToEfCore")
                        .HasColumnType("INTEGER")
                        .HasColumnName("migratedToEfCore")
                        .HasAnnotation("Cosmos:PropertyName", "migratedToEfCore")
                        .HasAnnotation("Relational:JsonPropertyName", "migratedToEfCore");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Cosmos:PropertyName", "partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.HasKey("Id");

                    b.ToTable("database_updates", (string)null);

                    b
                        .HasAnnotation("Cosmos:ContainerName", "database_updates")
                        .HasAnnotation("Cosmos:PartitionKeyName", "PartitionKey");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.LyricsAnalyzerConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasAnnotation("Cosmos:PropertyName", "id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("CommandDisabledGuildIds")
                        .HasColumnType("TEXT")
                        .HasColumnName("commandDisabledGuildIds")
                        .HasAnnotation("Cosmos:PropertyName", "commandDisabledGuildIds")
                        .HasAnnotation("Relational:JsonPropertyName", "commandDisabledGuildIds");

                    b.Property<string>("CommandEnabledGuildIds")
                        .HasColumnType("TEXT")
                        .HasColumnName("commandEnabledGuildIds")
                        .HasAnnotation("Cosmos:PropertyName", "commandEnabledGuildIds")
                        .HasAnnotation("Relational:JsonPropertyName", "commandEnabledGuildIds");

                    b.Property<bool>("CommandIsEnabledToSpecificGuilds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("commandIsEnabledToSpecificGuilds")
                        .HasAnnotation("Cosmos:PropertyName", "commandIsEnabledToSpecificGuilds")
                        .HasAnnotation("Relational:JsonPropertyName", "commandIsEnabledToSpecificGuilds");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Cosmos:PropertyName", "partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<bool>("RateLimitEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rateLimitEnabled")
                        .HasAnnotation("Cosmos:PropertyName", "rateLimitEnabled")
                        .HasAnnotation("Relational:JsonPropertyName", "rateLimitEnabled");

                    b.Property<string>("RateLimitIgnoredUserIds")
                        .HasColumnType("TEXT")
                        .HasColumnName("rateLimitIgnoredUserIds")
                        .HasAnnotation("Cosmos:PropertyName", "rateLimitIgnoredUserIds")
                        .HasAnnotation("Relational:JsonPropertyName", "rateLimitIgnoredUserIds");

                    b.Property<int>("RateLimitMaxRequests")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rateLimitMaxRequests")
                        .HasAnnotation("Cosmos:PropertyName", "rateLimitMaxRequests")
                        .HasAnnotation("Relational:JsonPropertyName", "rateLimitMaxRequests");

                    b.HasKey("Id");

                    b.ToTable("command_configs", (string)null);

                    b
                        .HasAnnotation("Cosmos:ContainerName", "command_configs")
                        .HasAnnotation("Cosmos:PartitionKeyName", "PartitionKey");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.LyricsAnalyzerItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasAnnotation("Cosmos:PropertyName", "id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("artistName")
                        .HasAnnotation("Cosmos:PropertyName", "artistName")
                        .HasAnnotation("Relational:JsonPropertyName", "artistName");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt")
                        .HasAnnotation("Cosmos:PropertyName", "createdAt")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Cosmos:PropertyName", "partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<string>("PromptStyle")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("promptStyle")
                        .HasAnnotation("Cosmos:PropertyName", "promptStyle")
                        .HasAnnotation("Relational:JsonPropertyName", "promptStyle");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("songName")
                        .HasAnnotation("Cosmos:PropertyName", "songName")
                        .HasAnnotation("Relational:JsonPropertyName", "songName");

                    b.HasKey("Id");

                    b.ToTable("lyrics_analyzer_items", (string)null);

                    b
                        .HasAnnotation("Cosmos:ContainerName", "lyrics_analyzer_items")
                        .HasAnnotation("Cosmos:PartitionKeyName", "PartitionKey");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.LyricsAnalyzerPromptStyle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasAnnotation("Cosmos:PropertyName", "id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AnalysisType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("analysisType")
                        .HasAnnotation("Cosmos:PropertyName", "analysisType")
                        .HasAnnotation("Relational:JsonPropertyName", "analysisType");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdOn")
                        .HasAnnotation("Cosmos:PropertyName", "createdOn")
                        .HasAnnotation("Relational:JsonPropertyName", "createdOn");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastUpdated")
                        .HasAnnotation("Cosmos:PropertyName", "lastUpdated")
                        .HasAnnotation("Relational:JsonPropertyName", "lastUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name")
                        .HasAnnotation("Cosmos:PropertyName", "name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("NoticeText")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("noticeText")
                        .HasAnnotation("Cosmos:PropertyName", "noticeText")
                        .HasAnnotation("Relational:JsonPropertyName", "noticeText");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Cosmos:PropertyName", "partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("prompt")
                        .HasAnnotation("Cosmos:PropertyName", "prompt")
                        .HasAnnotation("Relational:JsonPropertyName", "prompt");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("shortName")
                        .HasAnnotation("Cosmos:PropertyName", "shortName")
                        .HasAnnotation("Relational:JsonPropertyName", "shortName");

                    b.Property<string>("UserPrompt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("userPrompt")
                        .HasAnnotation("Cosmos:PropertyName", "userPrompt")
                        .HasAnnotation("Relational:JsonPropertyName", "userPrompt");

                    b.HasKey("Id");

                    b.ToTable("prompt_styles", (string)null);

                    b
                        .HasAnnotation("Cosmos:ContainerName", "prompt_styles")
                        .HasAnnotation("Cosmos:PartitionKeyName", "PartitionKey");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.LyricsAnalyzerUserRateLimit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasAnnotation("Cosmos:PropertyName", "id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("CurrentRequestCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currentRequestCount")
                        .HasAnnotation("Cosmos:PropertyName", "currentRequestCount")
                        .HasAnnotation("Relational:JsonPropertyName", "currentRequestCount");

                    b.Property<DateTimeOffset>("LastRequestTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastRequestTime")
                        .HasAnnotation("Cosmos:PropertyName", "lastRequestTime")
                        .HasAnnotation("Relational:JsonPropertyName", "lastRequestTime");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Cosmos:PropertyName", "partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("userId")
                        .HasAnnotation("Cosmos:PropertyName", "userId")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    b.HasKey("Id");

                    b.ToTable("user_rate_limit", (string)null);

                    b
                        .HasAnnotation("Cosmos:ContainerName", "user_rate_limit")
                        .HasAnnotation("Cosmos:PartitionKeyName", "PartitionKey");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.SongLyricsItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasAnnotation("Cosmos:PropertyName", "id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("artistName")
                        .HasAnnotation("Cosmos:PropertyName", "artistName")
                        .HasAnnotation("Relational:JsonPropertyName", "artistName");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt")
                        .HasAnnotation("Cosmos:PropertyName", "createdAt")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Lyrics")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("lyrics")
                        .HasAnnotation("Cosmos:PropertyName", "lyrics")
                        .HasAnnotation("Relational:JsonPropertyName", "lyrics");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Cosmos:PropertyName", "partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("songName")
                        .HasAnnotation("Cosmos:PropertyName", "songName")
                        .HasAnnotation("Relational:JsonPropertyName", "songName");

                    b.HasKey("Id");

                    b.ToTable("song_lyrics", (string)null);

                    b
                        .HasAnnotation("Cosmos:ContainerName", "song_lyrics")
                        .HasAnnotation("Cosmos:PartitionKeyName", "PartitionKey");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.SongLyricsRequestJob", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasAnnotation("Cosmos:PropertyName", "id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt")
                        .HasAnnotation("Cosmos:PropertyName", "createdAt")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("FallbackMethodNeeded")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fallbackMethodNeeded")
                        .HasAnnotation("Cosmos:PropertyName", "fallbackMethodNeeded")
                        .HasAnnotation("Relational:JsonPropertyName", "fallbackMethodNeeded");

                    b.Property<string>("GeniusUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("geniusUrl")
                        .HasAnnotation("Cosmos:PropertyName", "geniusUrl")
                        .HasAnnotation("Relational:JsonPropertyName", "geniusUrl");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isCompleted")
                        .HasAnnotation("Cosmos:PropertyName", "isCompleted")
                        .HasAnnotation("Relational:JsonPropertyName", "isCompleted");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Cosmos:PropertyName", "partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<string>("SongLyricsItemId")
                        .HasColumnType("TEXT")
                        .HasColumnName("songLyricsItemId")
                        .HasAnnotation("Cosmos:PropertyName", "songLyricsItemId")
                        .HasAnnotation("Relational:JsonPropertyName", "songLyricsItemId");

                    b.Property<bool>("StandaloneServiceAcknowledged")
                        .HasColumnType("INTEGER")
                        .HasColumnName("standaloneServiceAcknowledged")
                        .HasAnnotation("Cosmos:PropertyName", "standaloneServiceAcknowledged")
                        .HasAnnotation("Relational:JsonPropertyName", "standaloneServiceAcknowledged");

                    b.HasKey("Id");

                    b.ToTable("song_lyrics_request_jobs", (string)null);

                    b
                        .HasAnnotation("Cosmos:ContainerName", "song_lyrics_request_jobs")
                        .HasAnnotation("Cosmos:PartitionKeyName", "PartitionKey");
                });
#pragma warning restore 612, 618
        }
    }
}
