// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuzakBot.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MuzakBot.Database.Migrations.MuzakBotDb
{
    [DbContext(typeof(MuzakBotDbContext))]
    partial class MuzakBotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.AlbumRelease.AlbumReleaseReminder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("albumId")
                        .HasAnnotation("Relational:JsonPropertyName", "albumId");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channelId")
                        .HasAnnotation("Relational:JsonPropertyName", "channelId");

                    b.Property<string>("GuildId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guildId")
                        .HasAnnotation("Relational:JsonPropertyName", "guildId");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("releaseDate")
                        .HasAnnotation("Relational:JsonPropertyName", "releaseDate");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("boolean")
                        .HasColumnName("reminderSent")
                        .HasAnnotation("Relational:JsonPropertyName", "reminderSent");

                    b.Property<List<string>>("UserIdsToRemind")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("userIdsToRemind")
                        .HasAnnotation("Relational:JsonPropertyName", "userIdsToRemind");

                    b.HasKey("Id");

                    b.ToTable("release_reminders");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.DatabaseUpdate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<bool>("MigratedToEfCore")
                        .HasColumnType("boolean")
                        .HasColumnName("migratedToEfCore")
                        .HasAnnotation("Relational:JsonPropertyName", "migratedToEfCore");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.HasKey("Id");

                    b.ToTable("database_updates");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.AnalyzedLyrics", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Analysis")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("analysis")
                        .HasAnnotation("Relational:JsonPropertyName", "analysis");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("artistName")
                        .HasAnnotation("Relational:JsonPropertyName", "artistName");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<string>("PromptStyleUsed")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("promptStyleUsed")
                        .HasAnnotation("Relational:JsonPropertyName", "promptStyleUsed");

                    b.Property<string>("SongLyricsId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("songLyricsId")
                        .HasAnnotation("Relational:JsonPropertyName", "songLyricsId");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("songName")
                        .HasAnnotation("Relational:JsonPropertyName", "songName");

                    b.HasKey("Id");

                    b.ToTable("analyzed_lyrics");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.LyricsAnalyzerConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<decimal[]>("CommandDisabledGuildIds")
                        .HasColumnType("numeric(20,0)[]")
                        .HasColumnName("commandDisabledGuildIds")
                        .HasAnnotation("Relational:JsonPropertyName", "commandDisabledGuildIds");

                    b.Property<decimal[]>("CommandEnabledGuildIds")
                        .HasColumnType("numeric(20,0)[]")
                        .HasColumnName("commandEnabledGuildIds")
                        .HasAnnotation("Relational:JsonPropertyName", "commandEnabledGuildIds");

                    b.Property<bool>("CommandIsEnabledToSpecificGuilds")
                        .HasColumnType("boolean")
                        .HasColumnName("commandIsEnabledToSpecificGuilds")
                        .HasAnnotation("Relational:JsonPropertyName", "commandIsEnabledToSpecificGuilds");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<bool>("RateLimitEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("rateLimitEnabled")
                        .HasAnnotation("Relational:JsonPropertyName", "rateLimitEnabled");

                    b.Property<List<string>>("RateLimitIgnoredUserIds")
                        .HasColumnType("text[]")
                        .HasColumnName("rateLimitIgnoredUserIds")
                        .HasAnnotation("Relational:JsonPropertyName", "rateLimitIgnoredUserIds");

                    b.Property<int>("RateLimitMaxRequests")
                        .HasColumnType("integer")
                        .HasColumnName("rateLimitMaxRequests")
                        .HasAnnotation("Relational:JsonPropertyName", "rateLimitMaxRequests");

                    b.HasKey("Id");

                    b.ToTable("command_configs");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.LyricsAnalyzerItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("artistName")
                        .HasAnnotation("Relational:JsonPropertyName", "artistName");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<string>("PromptStyle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("promptStyle")
                        .HasAnnotation("Relational:JsonPropertyName", "promptStyle");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("songName")
                        .HasAnnotation("Relational:JsonPropertyName", "songName");

                    b.HasKey("Id");

                    b.ToTable("LyricsAnalyzerItems");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.LyricsAnalyzerPromptStyle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AnalysisType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("analysisType")
                        .HasAnnotation("Relational:JsonPropertyName", "analysisType");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOn")
                        .HasAnnotation("Relational:JsonPropertyName", "createdOn");

                    b.Property<string>("GptModel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gptModel")
                        .HasAnnotation("Relational:JsonPropertyName", "gptModel");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastUpdated")
                        .HasAnnotation("Relational:JsonPropertyName", "lastUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("NoticeText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("noticeText")
                        .HasAnnotation("Relational:JsonPropertyName", "noticeText");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prompt")
                        .HasAnnotation("Relational:JsonPropertyName", "prompt");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shortName")
                        .HasAnnotation("Relational:JsonPropertyName", "shortName");

                    b.Property<string>("UserPrompt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userPrompt")
                        .HasAnnotation("Relational:JsonPropertyName", "userPrompt");

                    b.HasKey("Id");

                    b.ToTable("prompt_styles");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.LyricsAnalyzerUserRateLimit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("CurrentRequestCount")
                        .HasColumnType("integer")
                        .HasColumnName("currentRequestCount")
                        .HasAnnotation("Relational:JsonPropertyName", "currentRequestCount");

                    b.Property<DateTimeOffset>("LastRequestTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastRequestTime")
                        .HasAnnotation("Relational:JsonPropertyName", "lastRequestTime");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userId")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    b.HasKey("Id");

                    b.ToTable("user_rate_limit");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.SongLyricsItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("artistName")
                        .HasAnnotation("Relational:JsonPropertyName", "artistName");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Lyrics")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lyrics")
                        .HasAnnotation("Relational:JsonPropertyName", "lyrics");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("songName")
                        .HasAnnotation("Relational:JsonPropertyName", "songName");

                    b.HasKey("Id");

                    b.ToTable("SongLyricsItems");
                });

            modelBuilder.Entity("MuzakBot.Lib.Models.Database.LyricsAnalyzer.SongLyricsRequestJob", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("FallbackMethodNeeded")
                        .HasColumnType("boolean")
                        .HasColumnName("fallbackMethodNeeded")
                        .HasAnnotation("Relational:JsonPropertyName", "fallbackMethodNeeded");

                    b.Property<string>("GeniusUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("geniusUrl")
                        .HasAnnotation("Relational:JsonPropertyName", "geniusUrl");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isCompleted")
                        .HasAnnotation("Relational:JsonPropertyName", "isCompleted");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("partitionKey")
                        .HasAnnotation("Relational:JsonPropertyName", "partitionKey");

                    b.Property<string>("SongLyricsItemId")
                        .HasColumnType("text")
                        .HasColumnName("songLyricsItemId")
                        .HasAnnotation("Relational:JsonPropertyName", "songLyricsItemId");

                    b.Property<bool>("StandaloneServiceAcknowledged")
                        .HasColumnType("boolean")
                        .HasColumnName("standaloneServiceAcknowledged")
                        .HasAnnotation("Relational:JsonPropertyName", "standaloneServiceAcknowledged");

                    b.HasKey("Id");

                    b.ToTable("SongLyricsRequestJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
